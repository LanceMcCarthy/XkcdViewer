name: MAUI Release

on:
  # manually executed, using main branch for the code
  workflow_dispatch:
  
env:
  PROJECT_PATH: "src/XkcdViewer.Maui/XkcdViewer.Maui.csproj"
  NUGETCONFIG_PATH: "src/nuget.config"
  BUILD_CONFIG: Release
  TFM: net8.0
  TELERIK_USERNAME: ${{secrets.MyTelerikAccountUsername}}
  TELERIK_PASSWORD: ${{secrets.MyTelerikAccountPassword}}
  MACOS_ARTIFACTS_PATH: "artifacts_macos"
  IOS_ARTIFACTS_PATH: "artifacts_ios"
  ANDROID_ARTIFACTS_PATH: "artifacts_android"
  WINDOWS_ARTIFACTS_PATH: "artifacts_windows"

jobs:
# ***************************** #
# >>>>>>> Android build <<<<<<< #
# ***************************** #
  maui-android:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '11'

    - name: Generate version number using date and run number
      shell: pwsh
      id: version-creator
      run: |
        $buildDay = Get-Date -Format "yyyy.Mdd"
        $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
        echo "APP_VERSION=$ver" >> $GITHUB_OUTPUT

    - name: Install MAUI workloads (required for GitHub-hosted runners)
      shell: pwsh
      run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

    - name: Restore NuGet packages
      shell: pwsh
      run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}

    - name: Base64 To PFX file
      id: write_file
      uses: timheuer/base64-to-file@v1.2
      with:
        fileName: "${{secrets.ANDROID_SIGNING_KEYSTORE_FILENAME}}"
        fileDir: "${{github.workspace}}"
        encodedString: ${{secrets.ANDROID_SIGNING_KEYSTORE_BASE64}}

    - name: Build Maui Android project
      shell: pwsh
      run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-android" --no-restore -p:AndroidKeyStore=true -p:AndroidSigningKeyStore="${{steps.write_file.outputs.filePath}}" -p:AndroidSigningStorePass="${{secrets.ANDROID_SIGNING_STORE_PASS}}" -p:AndroidSigningKeyAlias="${{secrets.ANDROID_SIGNING_KEY_ALIAS}}" -p:AndroidSigningKeyPass="${{secrets.ANDROID_SIGNING_KEY_PASS}}"

    - name: Create artifacts folder
      shell: pwsh
      run: |
          cd ${{github.workspace}}
          mkdir -p ${{env.ANDROID_ARTIFACTS_PATH}}

    - name: Copy signed APKs & AABs
      shell: pwsh 
      run: |
          Get-Childitem -Path ${{github.workspace}} -Include *Signed.apk -File -Recurse | Copy-Item -Destination ${{env.ANDROID_ARTIFACTS_PATH}}
          Get-Childitem -Path ${{github.workspace}} -Include *Signed.aab -File -Recurse | Copy-Item -Destination ${{env.ANDROID_ARTIFACTS_PATH}}

    - name: Publish Android build artifacts
      uses: actions/upload-artifact@v3
      with:     
        name: "Android artifacts" 
        path: "${{env.ANDROID_ARTIFACTS_PATH}}/*"
        if-no-files-found: warn
        retention-days: 60


# ***************************** #
# >>>>>>> Windows Build <<<<<<< #
# ***************************** #
  maui-windows:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Needed for WinUI builds
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.2

    - name: Generate version number using date and run number
      shell: pwsh
      id: version-creator
      run: |
        $buildDay = Get-Date -Format "yyyy.Mdd"
        $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
        echo "APP_VERSION=$ver" >> $GITHUB_OUTPUT

    - name: Install MAUI workloads (required for GitHub-hosted runners)
      shell: pwsh
      run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

    - name: Restore NuGet packages
      shell: pwsh
      run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}

    # *********** Original build & sign approach - Using PFX file *********** #

    # - name: Base64 To PFX file
    #   id: write_file
    #   uses: timheuer/base64-to-file@v1.2
    #   with:
    #     fileName: "${{secrets.CODESIGN_CERTIFICATE_FILENAME}}"
    #     fileDir: "${{github.workspace}}"
    #     encodedString: ${{secrets.CODESIGN_CERTIFICATE_BASE64}}

    # - name: Build Maui WinUI project
    #   shell: pwsh
    #   run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-windows10.0.19041.0" -p:PublishTrimmed=False -p:GenerateAppxPackageOnBuild=true -p:AppxPackageSigningEnabled=true -p:PackageCertificateThumbprint=${{secrets.CODESIGN_CERTIFICATE_THUMBPRINT}} -p:PackageCertificateKeyFile="${{steps.write_file.outputs.filePath}}" -p:PackageCertificatePassword="${{secrets.CODESIGN_CERTIFICATE_PASSWORD}}"
    
    # *********** End - original approach *********** #

    # *********** New approach! Using Microsoft Trusted Signing *********** #

    # Step 1. Make sure the build goes well
    - name: Build Maui WinUI project
      shell: pwsh
      run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-windows10.0.19041.0" -p:PublishTrimmed=False -p:GenerateAppxPackageOnBuild=true -p:AppxPackageSigningEnabled=false

    # Step 2. dynamic secrets from Akeyless This dynamically generates a temporary AAD credential
    - name: Get AAD Secret
      id: aad-secret
      uses: LanceMcCarthy/akeyless-aad-secret@v1
      with:
        akeyless-secret-path: '/DevTools/live-azure-ad'
        akeyless-access-id: 'p-m9vvgiii6rip'
        akeyless-access-key: '${{ secrets.AKEYLESS_ACCESS_KEY }}'
    
    # Step 3. Use the temporary credential to access Trusted Signing Accountin Azure
    - name: Sign files with Trusted Signing
      uses: azure/trusted-signing-action@v0.4.0
      with:
        azure-tenant-id: "${{steps.aad-secret.outputs.tenant-id}}"
        azure-client-id: "${{steps.aad-secret.outputs.app-id }}"
        azure-client-secret: "${{steps.aad-secret.outputs.secret-text}}"
        endpoint: https://eus.codesigning.azure.net/
        trusted-signing-account-name: PrimaryCodeSign
        certificate-profile-name: Codesign-Primary
        files-folder: ${{github.workspace}}/${{env.WINDOWS_ARTIFACTS_PATH}}
        files-folder-filter: msix,exe,dll
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    # *********** End - new approach *********** #

    
    - name: Create artifacts folder and copy packages
      shell: pwsh
      run: |
          cd ${{github.workspace}}
          mkdir -p ${{env.WINDOWS_ARTIFACTS_PATH}}
          Get-Childitem -Path ${{github.workspace}} -Include *.msix -File -Recurse | Copy-Item -Destination ${{env.WINDOWS_ARTIFACTS_PATH}}

    - name: Publish build artifacts
      uses: actions/upload-artifact@v3
      with:     
        name: "WinUI .NET MAUI artifacts" 
        path: "${{env.WINDOWS_ARTIFACTS_PATH}}/*"
        if-no-files-found: warn
        retention-days: 60


# # ************************* #
# # >>>>>>> iOS Build <<<<<<< #
# # ************************* #
#   maui-ios:
#     runs-on: macos-12
#     env:
#       CODESIGN_KEY: "Apple Distribution: Lancelot Software (L25222N3C7)"
#       CODESIGN_PROV_PROFILE: "mauidemo_ios_appstore"
#       CODESIGN_PROFILE_TYPE: "IOS_APP_STORE"
#       APP_ID: "com.mycompany.mauidemo"
#       RID: ios-arm64
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Setup .NET Core SDK
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: '8.0.x'

#     - uses: maxim-lobanov/setup-xcode@v1
#       with:
#         xcode-version: latest

#     - name: Generate version number using date and run number
#       id: version-creator
#       shell: bash
#       run: |
#         buildDay=`date +%Y.%m%d`
#         echo $buildDay
#         ver="${buildDay}.${GITHUB_RUN_NUMBER}.0"
#         echo $ver
#         echo "APP_VERSION=$ver" >> $GITHUB_ENV

#     - name: Install MAUI workloads (required for GitHub-hosted runners)
#       shell: pwsh
#       run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

#     - name: Restore NuGet packages
#       shell: bash
#       run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}

#     # Docs https://github.com/Apple-Actions/import-codesign-certs
#     - name: Import Code-Signing Certificates
#       uses: Apple-Actions/import-codesign-certs@v2
#       with:
#         p12-file-base64: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64}}"
#         p12-password: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD}}"

#     # Docs https://github.com/Apple-Actions/download-provisioning-profiles
#     - uses: Apple-Actions/download-provisioning-profiles@v2
#       with:
#         profile-type: ${{env.APP_ID}}
#         bundle-id: "${{env.CODESIGN_PROV_PROFILE}}"
#         issuer-id: "${{secrets.APPSTORE_API_ISSUER_ID}}"
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}"

#     - name: Build iOS project
#       shell: bash
#       run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-ios" --no-restore -p:PublishTrimmed=True -p:MtouchLink=SdkOnly -p:RuntimeIdentifier=${{env.RID}} -p:ApplicationId=${{env.APP_ID}} -p:CodesignProvision=${{env.CODESIGN_PROV_PROFILE}} -p:CodesignKey=${{env.CODESIGN_KEY}}

#     # Docs https://github.com/Apple-Actions/upload-testflight-build
#     - name: 'Upload app to TestFlight'
#       uses: apple-actions/upload-testflight-build@v1
#       with: 
#         app-path: "${{github.workspace}}/**/*.ipa" 
#         issuer-id: ${{secrets.APPSTORE_API_ISSUER_ID}}
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}"

#     - name: Create artifacts folder and copy packages
#       shell: pwsh
#       run: |
#           cd ${{github.workspace}}
#           mkdir -p ${{env.IOS_ARTIFACTS_PATH}}
#           Get-Childitem -Path ${{github.workspace}} -Include *.app -File -Recurse | Copy-Item -Destination ${{env.IOS_ARTIFACTS_PATH}}
  
#     - name: Publish iOS build artifacts
#       uses: actions/upload-artifact@v3
#       with:     
#         name: "iOS artifacts" 
#         path: "${{env.IOS_ARTIFACTS_PATH}}/*"
#         if-no-files-found: warn
#         retention-days: 60


# # ********************************* #
# # >>>>>>> MacCatalyst Build <<<<<<< #
# # ********************************* #
#   maui-maccatalyst:
#     runs-on: macos-12
#     env:
#       CODESIGN_KEY: "Apple Distribution: MyCompany (L25222N3C7)"
#       CODESIGN_PROV_PROFILE: "mauidemo_maccatalyst_appstore"
#       CODESIGN_PROFILE_TYPE: "MAC_APP_STORE"
#       CODESIGN_ENTITLEMENTS: "Platforms/MacCatalyst/Entitlements.plist"
#       APP_ID: "com.mycompany.mauidemo"
#       RID: maccatalyst-x64
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Setup .NET Core SDK
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: '8.0.x'

#     - uses: maxim-lobanov/setup-xcode@v1
#       with:
#         xcode-version: latest

#     - name: Generate version number using date and run number
#       id: version-creator
#       shell: bash
#       run: |
#         buildDay=`date +%Y.%m%d`
#         echo $buildDay
#         ver="${buildDay}.${GITHUB_RUN_NUMBER}.0"
#         echo $ver
#         echo "APP_VERSION=$ver" >> $GITHUB_ENV

#     - name: Install MAUI workloads (required for GitHub-hosted runners)
#       shell: pwsh
#       run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

#     - name: Restore NuGet packages
#       shell: bash
#       run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}
    
#     # Docs https://github.com/Apple-Actions/import-codesign-certs
#     - name: Import Code-Signing Certificates
#       uses: Apple-Actions/import-codesign-certs@v2
#       with:
#         p12-file-base64: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64}}"
#         p12-password: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD}}"

#     # Docs https://github.com/Apple-Actions/download-provisioning-profiles
#     - uses: Apple-Actions/download-provisioning-profiles@v2
#       with:
#         profile-type: ${{env.APP_ID}}
#         bundle-id: "${{env.CODESIGN_PROV_PROFILE}}"
#         issuer-id: "${{secrets.APPSTORE_API_ISSUER_ID}}"
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}"
      
#     - name: Build MacCatalyst project
#       shell: bash
#       run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-maccatalyst" --no-restore -p:PublishTrimmed=True -p:MtouchLink=SdkOnly -p:RuntimeIdentifier=${{env.RID}} -p:EnableCodeSigning=true -p:EnablePackageSigning=true -p:ApplicationId=${{env.APP_ID}} -p:CodesignProvision=${{env.CODESIGN_PROV_PROFILE}} -p:CodesignKey=${{env.CODESIGN_KEY}} -p:CodesignEntitlements=${{env.CODESIGN_ENTITLEMENTS}}

#     # Docs https://github.com/Apple-Actions/upload-testflight-build
#     - name: 'Upload app to TestFlight'
#       uses: apple-actions/upload-testflight-build@v1
#       with: 
#         app-path: "${{github.workspace}}/**/*.pkg" 
#         issuer-id: ${{secrets.APPSTORE_API_ISSUER_ID}}
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}" 

#     - name: Create artifacts folder and copy packages
#       shell: pwsh
#       run: |
#           cd ${{github.workspace}}
#           mkdir -p ${{env.MACOS_ARTIFACTS_PATH}}
#           Get-Childitem -Path ${{github.workspace}} -Include *.pkg -File -Recurse | Copy-Item -Destination ${{env.MACOS_ARTIFACTS_PATH}}

#     - name: Publish macOS build artifacts
#       uses: actions/upload-artifact@v3
#       with:     
#         name: "macOS artifacts" 
#         path: "${{env.MACOS_ARTIFACTS_PATH}}/*"
#         if-no-files-found: warn
#         retention-days: 60