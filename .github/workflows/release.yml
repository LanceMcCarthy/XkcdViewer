name: MAUI Release

on:
  # manually executed, using main branch for the code
  workflow_dispatch:
  
env:
  PROJECT_PATH: "src/XkcdViewer.Maui/XkcdViewer.Maui.csproj"
  NUGETCONFIG_PATH: "src/nuget.config"
  BUILD_CONFIG: Release
  TFM: net8.0
  MACOS_ARTIFACTS_PATH: "artifacts_macos"
  IOS_ARTIFACTS_PATH: "artifacts_ios"
  ANDROID_ARTIFACTS_PATH: "artifacts_android"
  WINDOWS_ARTIFACTS_PATH: "artifacts_windows"
  TELERIK_USERNAME: ${{secrets.MyTelerikAccountUsername}}
  TELERIK_PASSWORD: ${{secrets.MyTelerikAccountPassword}}

jobs:
  # ****************************************************************** #
  #                          Windows Build                             #
  # ****************************************************************** #
  maui-windows:
    runs-on: windows-2022
    permissions:  # Permissions for Azure CLI login using OIDC and publishing a GitHub Release
      id-token: write
      contents: write
      discussions: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Adding msuild.exe for WinUI support
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.2

    # This generates a unique version number using the date and the workflow run number (e.g. 2022.0314.1.0)
    - name: Generate version number using date and run number
      id: version-creator
      run: |
        $buildDay = Get-Date -Format "yyyy.Mdd"
        $runNumber = "$env:GITHUB_RUN_NUMBER"
        $ver = $buildDay + "." + $runNumber + ".0"
        echo "APP_VERSION=$ver" >> $env:GITHUB_OUTPUT

    # We need to make sure the appxmanifest uses the same Identity that Azure Trusted Signing is expecting.
    - name: Update manifest
      run: |
        [xml]$manifest = get-content "src\XkcdViewer.Maui\Platforms\Windows\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{steps.version-creator.outputs.APP_VERSION}}"
        $manifest.Package.Identity.Name = "61469LanceLotSoftware.XKCDComicViewer"
        $manifest.Package.Identity.Publisher = 'CN=" Lance McCarthy", O=" Lance McCarthy", L=Revere, S=Massachusetts, C=US'
        $manifest.Package.Properties.DisplayName = "xkcd Comic Viewer"
        $manifest.Package.Properties.PublisherDisplayName = "Lance McCarthy"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "xkcd Viewer"
        $manifest.save("src\XkcdViewer.Maui\Platforms\Windows\Package.appxmanifest")

    # The hosted runners do not have the maui workload installed by default, so we need to install it
    - name: Install MAUI workloads (required for GitHub-hosted runners)
      shell: pwsh
      run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

    # Restore NuGet packages ahead of time because we want to use the dedicated nuget.config file
    - name: Restore NuGet packages
      shell: pwsh
      run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}

    # Compile and publish the WinUI project
    - name: Build Maui WinUI project
      shell: pwsh
      run: dotnet publish ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-windows10.0.19041.0" -p:RuntimeIdentifierOverride=win10-x64 -p:PublishTrimmed=False -p:GenerateAppxPackageOnBuild=true -p:AppxPackageSigningEnabled=false -p:EnableMsixTooling=true

    # Login to Azure CLI
    # No secrets needed! This will use the GitHub OIDC token to authenticate.
    - name: Azure login using OIDC via GitHub
      uses: azure/login@v2
      id: azlogin
      with:
        client-id: "32daa13b-f4bb-4809-8ef6-58cb39051acd"
        tenant-id: "bd47e796-3473-4b8a-9101-1f4c0c7af31a"
        subscription-id: "48ab4839-62af-4ab3-afe6-043ea4d7c137"

    # New code signing approach
    # Use an Azure 'Trusted Signing Account' to sign the output (instead of a PFX file within the dotnet publish command)
    - name: Sign files with Trusted Signing
      uses: azure/trusted-signing-action@v0.4.0
      with:
        endpoint: https://eus.codesigning.azure.net/
        trusted-signing-account-name: PrimaryCodeSign
        certificate-profile-name: lancemccarthylivepublic
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256
        file-digest: SHA256
        files-folder: ${{github.workspace}}\src\XkcdViewer.Maui\bin\Release\net8.0-windows10.0.19041.0\
        files-folder-recurse: true
        files-folder-depth: 4
        files-folder-filter: msix, msixbundle
        exclude-azure-cli-credential: false
        exclude-environment-credential: true
        exclude-workload-identity-credential: true
        exclude-managed-identity-credential: true
        exclude-shared-token-cache-credential: true
        exclude-visual-studio-credential: true
        exclude-visual-studio-code-credential: true
        exclude-azure-powershell-credential: true
        exclude-azure-developer-cli-credential: true
        exclude-interactive-browser-credential: true

    # Attaching the msix files to the GitHub artifacts for each build (this is not a GitHub release)
    - name: Publish build artifacts
      uses: actions/upload-artifact@v4
      with:     
        name: "XkcdViewer_v${{steps.version-creator.outputs.APP_VERSION}}.msix" 
        path: ${{github.workspace}}/**/*.msix
        if-no-files-found: error
        retention-days: 30

    # Create a GitHub Release with the msix file(s) attached
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        name: "XkcdViewer v.${{steps.version-creator.outputs.APP_VERSION}}"
        tag_name: "v${{steps.version-creator.outputs.APP_VERSION}}"
        body: "This is v.${{steps.version-creator.outputs.APP_VERSION}} of the xkcd viewer app. To install, download and run the .msix installer file."
        files: ${{github.workspace}}/**/*.msix


  # ****************************************************************** #
  #                          Android build                             #
  # ****************************************************************** #
  # maui-android:
  #   runs-on: windows-2022
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Setup .NET Core SDK
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: '8.0.x'

  #   - uses: actions/setup-java@v4
  #     with:
  #       distribution: 'microsoft'
  #       java-version: '11'

  #   - name: Generate version number using date and run number
  #     shell: pwsh
  #     id: version-creator
  #     run: |
  #       $buildDay = Get-Date -Format "yyyy.Mdd"
  #       $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
  #       echo "APP_VERSION=$ver" >> $GITHUB_OUTPUT

  #   - name: Install MAUI workloads (required for GitHub-hosted runners)
  #     shell: pwsh
  #     run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

  #   - name: Restore NuGet packages
  #     shell: pwsh
  #     run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}

  #   - name: Base64 To PFX file
  #     id: write_file
  #     uses: timheuer/base64-to-file@v1.2
  #     with:
  #       fileName: "${{secrets.ANDROID_SIGNING_KEYSTORE_FILENAME}}"
  #       fileDir: "${{github.workspace}}"
  #       encodedString: ${{secrets.ANDROID_SIGNING_KEYSTORE_BASE64}}

  #   - name: Build Maui Android project
  #     shell: pwsh
  #     run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-android" --no-restore -p:AndroidKeyStore=true -p:AndroidSigningKeyStore="${{steps.write_file.outputs.filePath}}" -p:AndroidSigningStorePass="${{secrets.ANDROID_SIGNING_STORE_PASS}}" -p:AndroidSigningKeyAlias="${{secrets.ANDROID_SIGNING_KEY_ALIAS}}" -p:AndroidSigningKeyPass="${{secrets.ANDROID_SIGNING_KEY_PASS}}"

  #   - name: Create artifacts folder
  #     shell: pwsh
  #     run: |
  #         cd ${{github.workspace}}
  #         mkdir -p ${{env.ANDROID_ARTIFACTS_PATH}}

  #   - name: Copy signed APKs & AABs
  #     shell: pwsh 
  #     run: |
  #         Get-Childitem -Path ${{github.workspace}} -Include *.apk -File -Recurse | Copy-Item -Destination ${{env.ANDROID_ARTIFACTS_PATH}}
  #         Get-Childitem -Path ${{github.workspace}} -Include *.aab -File -Recurse | Copy-Item -Destination ${{env.ANDROID_ARTIFACTS_PATH}}

  #   - name: Publish Android build artifacts
  #     uses: actions/upload-artifact@v4
  #     with:     
  #       name: "Android artifacts" 
  #       path: |
  #         "${{env.ANDROID_ARTIFACTS_PATH}}/**/*.apk"
  #         "${{env.ANDROID_ARTIFACTS_PATH}}/**/*.aab"
  #       if-no-files-found: warn
  #       retention-days: 30

  # ****************************************************************** #
  #                            iOS Build                               #
  # ****************************************************************** #
#   maui-ios:
#     runs-on: macos-12
#     env:
#       CODESIGN_KEY: "Apple Distribution: Lancelot Software (L25222N3C7)"
#       CODESIGN_PROV_PROFILE: "mauidemo_ios_appstore"
#       CODESIGN_PROFILE_TYPE: "IOS_APP_STORE"
#       APP_ID: "com.mycompany.mauidemo"
#       RID: ios-arm64
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Setup .NET Core SDK
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: '8.0.x'

#     - uses: maxim-lobanov/setup-xcode@v1
#       with:
#         xcode-version: latest

#     - name: Generate version number using date and run number
#       id: version-creator
#       shell: bash
#       run: |
#         buildDay=`date +%Y.%m%d`
#         echo $buildDay
#         ver="${buildDay}.${GITHUB_RUN_NUMBER}.0"
#         echo $ver
#         echo "APP_VERSION=$ver" >> $GITHUB_ENV

#     - name: Install MAUI workloads (required for GitHub-hosted runners)
#       shell: pwsh
#       run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

#     - name: Restore NuGet packages
#       shell: bash
#       run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}

#     # Docs https://github.com/Apple-Actions/import-codesign-certs
#     - name: Import Code-Signing Certificates
#       uses: Apple-Actions/import-codesign-certs@v2
#       with:
#         p12-file-base64: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64}}"
#         p12-password: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD}}"

#     # Docs https://github.com/Apple-Actions/download-provisioning-profiles
#     - uses: Apple-Actions/download-provisioning-profiles@v2
#       with:
#         profile-type: ${{env.APP_ID}}
#         bundle-id: "${{env.CODESIGN_PROV_PROFILE}}"
#         issuer-id: "${{secrets.APPSTORE_API_ISSUER_ID}}"
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}"

#     - name: Build iOS project
#       shell: bash
#       run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-ios" --no-restore -p:PublishTrimmed=True -p:MtouchLink=SdkOnly -p:RuntimeIdentifier=${{env.RID}} -p:ApplicationId=${{env.APP_ID}} -p:CodesignProvision=${{env.CODESIGN_PROV_PROFILE}} -p:CodesignKey=${{env.CODESIGN_KEY}}

#     # Docs https://github.com/Apple-Actions/upload-testflight-build
#     - name: 'Upload app to TestFlight'
#       uses: apple-actions/upload-testflight-build@v1
#       with: 
#         app-path: "${{github.workspace}}/**/*.ipa" 
#         issuer-id: ${{secrets.APPSTORE_API_ISSUER_ID}}
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}"

#     - name: Create artifacts folder and copy packages
#       shell: pwsh
#       run: |
#           cd ${{github.workspace}}
#           mkdir -p ${{env.IOS_ARTIFACTS_PATH}}
#           Get-Childitem -Path ${{github.workspace}} -Include *.app -File -Recurse | Copy-Item -Destination ${{env.IOS_ARTIFACTS_PATH}}
  
#     - name: Publish iOS build artifacts
#       uses: actions/upload-artifact@v4
#       with:     
#         name: "iOS artifacts" 
#         path: "${{env.IOS_ARTIFACTS_PATH}}/*"
#         if-no-files-found: warn
#         retention-days: 30


# # ****************************************************************** #
# #                      MacCatalyst Build                             #
# # ****************************************************************** #
#   maui-maccatalyst:
#     runs-on: macos-12
#     env:
#       CODESIGN_KEY: "Apple Distribution: MyCompany (L25222N3C7)"
#       CODESIGN_PROV_PROFILE: "mauidemo_maccatalyst_appstore"
#       CODESIGN_PROFILE_TYPE: "MAC_APP_STORE"
#       CODESIGN_ENTITLEMENTS: "Platforms/MacCatalyst/Entitlements.plist"
#       APP_ID: "com.mycompany.mauidemo"
#       RID: maccatalyst-x64
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Setup .NET Core SDK
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: '8.0.x'

#     - uses: maxim-lobanov/setup-xcode@v1
#       with:
#         xcode-version: latest

#     - name: Generate version number using date and run number
#       id: version-creator
#       shell: bash
#       run: |
#         buildDay=`date +%Y.%m%d`
#         echo $buildDay
#         ver="${buildDay}.${GITHUB_RUN_NUMBER}.0"
#         echo $ver
#         echo "APP_VERSION=$ver" >> $GITHUB_ENV

#     - name: Install MAUI workloads (required for GitHub-hosted runners)
#       shell: pwsh
#       run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

#     - name: Restore NuGet packages
#       shell: bash
#       run: dotnet restore ${{env.PROJECT_PATH}} --configfile ${{env.NUGETCONFIG_PATH}}
    
#     # Docs https://github.com/Apple-Actions/import-codesign-certs
#     - name: Import Code-Signing Certificates
#       uses: Apple-Actions/import-codesign-certs@v2
#       with:
#         p12-file-base64: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64}}"
#         p12-password: "${{secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD}}"

#     # Docs https://github.com/Apple-Actions/download-provisioning-profiles
#     - uses: Apple-Actions/download-provisioning-profiles@v2
#       with:
#         profile-type: ${{env.APP_ID}}
#         bundle-id: "${{env.CODESIGN_PROV_PROFILE}}"
#         issuer-id: "${{secrets.APPSTORE_API_ISSUER_ID}}"
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}"
      
#     - name: Build MacCatalyst project
#       shell: bash
#       run: dotnet build ${{env.PROJECT_PATH}} -c ${{env.BUILD_CONFIG}} -f "${{env.TFM}}-maccatalyst" --no-restore -p:PublishTrimmed=True -p:MtouchLink=SdkOnly -p:RuntimeIdentifier=${{env.RID}} -p:EnableCodeSigning=true -p:EnablePackageSigning=true -p:ApplicationId=${{env.APP_ID}} -p:CodesignProvision=${{env.CODESIGN_PROV_PROFILE}} -p:CodesignKey=${{env.CODESIGN_KEY}} -p:CodesignEntitlements=${{env.CODESIGN_ENTITLEMENTS}}

#     # Docs https://github.com/Apple-Actions/upload-testflight-build
#     - name: 'Upload app to TestFlight'
#       uses: apple-actions/upload-testflight-build@v1
#       with: 
#         app-path: "${{github.workspace}}/**/*.pkg" 
#         issuer-id: ${{secrets.APPSTORE_API_ISSUER_ID}}
#         api-key-id: "${{secrets.APPSTORE_API_KEY_ID}}"
#         api-private-key: "${{secrets.APPSTORE_API_PRIVATE_KEY}}" 

#     - name: Create artifacts folder and copy packages
#       shell: pwsh
#       run: |
#           cd ${{github.workspace}}
#           mkdir -p ${{env.MACOS_ARTIFACTS_PATH}}
#           Get-Childitem -Path ${{github.workspace}} -Include *.pkg -File -Recurse | Copy-Item -Destination ${{env.MACOS_ARTIFACTS_PATH}}

#     - name: Publish macOS build artifacts
#       uses: actions/upload-artifact@v4
#       with:     
#         name: "macOS artifacts" 
#         path: "${{env.MACOS_ARTIFACTS_PATH}}/*"
#         if-no-files-found: warn
#         retention-days: 30